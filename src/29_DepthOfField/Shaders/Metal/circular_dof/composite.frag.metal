#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformDOF
{
    float maxRadius;
    float blend;
};

constant float4 _171[17] = { float4(0.014096000231802463531494140625, -0.02265799976885318756103515625, 0.055991001427173614501953125, 0.0044129998423159122467041015625), float4(-0.02061199955642223358154296875, -0.02557400055229663848876953125, 0.01918799988925457000732421875, 0.0), float4(-0.0387080013751983642578125, 0.00695700012147426605224609375, 0.0, 0.049222998321056365966796875), float4(-0.0214489996433258056640625, 0.040467999875545501708984375, 0.01830100081861019134521484375, 0.099928997457027435302734375), float4(0.01301500014960765838623046875, 0.050223000347614288330078125, 0.0548450015485286712646484375, 0.114688999950885772705078125), float4(0.0421780012547969818115234375, 0.038584999740123748779296875, 0.085768997669219970703125, 0.097079999744892120361328125), float4(0.05797199904918670654296875, 0.01981200091540813446044921875, 0.102517001330852508544921875, 0.0686739981174468994140625), float4(0.0636470019817352294921875, 0.0052519999444484710693359375, 0.108534999191761016845703125, 0.0466430000960826873779296875), float4(0.064754001796245574951171875, 0.0, 0.109709002077579498291015625, 0.0386970005929470062255859375), float4(0.0636470019817352294921875, 0.0052519999444484710693359375, 0.108534999191761016845703125, 0.0466430000960826873779296875), float4(0.05797199904918670654296875, 0.01981200091540813446044921875, 0.102517001330852508544921875, 0.0686739981174468994140625), float4(0.0421780012547969818115234375, 0.038584999740123748779296875, 0.085768997669219970703125, 0.097079999744892120361328125), float4(0.01301500014960765838623046875, 0.050223000347614288330078125, 0.0548450015485286712646484375, 0.114688999950885772705078125), float4(-0.0214489996433258056640625, 0.040467999875545501708984375, 0.01830100081861019134521484375, 0.099928997457027435302734375), float4(-0.0387080013751983642578125, 0.00695700012147426605224609375, 0.0, 0.049222998321056365966796875), float4(-0.02061199955642223358154296875, -0.02557400055229663848876953125, 0.01918799988925457000732421875, 0.0), float4(0.014096000231802463531494140625, -0.02265799976885318756103515625, 0.055991001427173614501953125, 0.0044129998423159122467041015625) };
constant float4 _181[17] = { float4(0.0001150000025518238544464111328125, 0.00911599956452846527099609375, 0.0, 0.05114699900150299072265625), float4(0.0053240000270307064056396484375, 0.013415999710559844970703125, 0.00931099988520145416259765625, 0.07527600228786468505859375), float4(0.013752999715507030487060546875, 0.01651900075376033782958984375, 0.02437599934637546539306640625, 0.09268499910831451416015625), float4(0.02470000088214874267578125, 0.01721500046551227569580078125, 0.043940000236034393310546875, 0.096591003239154815673828125), float4(0.036692999303340911865234375, 0.015064000152051448822021484375, 0.0653750002384185791015625, 0.084521003067493438720703125), float4(0.0479759983718395233154296875, 0.01068400032818317413330078125, 0.08553899824619293212890625, 0.0599480010569095611572265625), float4(0.057015001773834228515625, 0.00557000003755092620849609375, 0.101695001125335693359375, 0.031254000961780548095703125), float4(0.062781997025012969970703125, 0.00152900000102818012237548828125, 0.11200200021266937255859375, 0.008577999658882617950439453125), float4(0.064754001796245574951171875, 0.0, 0.115525998175144195556640625, 0.0), float4(0.062781997025012969970703125, 0.00152900000102818012237548828125, 0.11200200021266937255859375, 0.008577999658882617950439453125), float4(0.057015001773834228515625, 0.00557000003755092620849609375, 0.101695001125335693359375, 0.031254000961780548095703125), float4(0.0479759983718395233154296875, 0.01068400032818317413330078125, 0.08553899824619293212890625, 0.0599480010569095611572265625), float4(0.036692999303340911865234375, 0.015064000152051448822021484375, 0.0653750002384185791015625, 0.084521003067493438720703125), float4(0.02470000088214874267578125, 0.01721500046551227569580078125, 0.043940000236034393310546875, 0.096591003239154815673828125), float4(0.013752999715507030487060546875, 0.01651900075376033782958984375, 0.02437599934637546539306640625, 0.09268499910831451416015625), float4(0.0053240000270307064056396484375, 0.013415999710559844970703125, 0.00931099988520145416259765625, 0.07527600228786468505859375), float4(0.0001150000025518238544464111328125, 0.00911599956452846527099609375, 0.0, 0.05114699900150299072265625) };
constant float4 _191[17] = { float4(-0.00144200003705918788909912109375, 0.02665599994361400604248046875, 0.0, 0.085608996450901031494140625), float4(0.0104879997670650482177734375, 0.0309449993073940277099609375, 0.017733000218868255615234375, 0.099384002387523651123046875), float4(0.0237709991633892059326171875, 0.0308299995958805084228515625, 0.0374750010669231414794921875, 0.09901200234889984130859375), float4(0.0363559983670711517333984375, 0.0267699994146823883056640625, 0.05618099868297576904296875, 0.085975997149944305419921875), float4(0.0468220002949237823486328125, 0.020139999687671661376953125, 0.071736998856067657470703125, 0.064680002629756927490234375), float4(0.054554998874664306640625, 0.012687000446021556854248046875, 0.0832310020923614501953125, 0.0407450012862682342529296875), float4(0.05960600078105926513671875, 0.0060740001499652862548828125, 0.090737998485565185546875, 0.01950700022280216217041015625), float4(0.062366001307964324951171875, 0.001583999954164028167724609375, 0.09484100341796875, 0.005086000077426433563232421875), float4(0.063231997191905975341796875, 0.0, 0.09612800180912017822265625, 0.0), float4(0.062366001307964324951171875, 0.001583999954164028167724609375, 0.09484100341796875, 0.005086000077426433563232421875), float4(0.05960600078105926513671875, 0.0060740001499652862548828125, 0.090737998485565185546875, 0.01950700022280216217041015625), float4(0.054554998874664306640625, 0.012687000446021556854248046875, 0.0832310020923614501953125, 0.0407450012862682342529296875), float4(0.0468220002949237823486328125, 0.020139999687671661376953125, 0.071736998856067657470703125, 0.064680002629756927490234375), float4(0.0363559983670711517333984375, 0.0267699994146823883056640625, 0.05618099868297576904296875, 0.085975997149944305419921875), float4(0.0237709991633892059326171875, 0.0308299995958805084228515625, 0.0374750010669231414794921875, 0.09901200234889984130859375), float4(0.0104879997670650482177734375, 0.0309449993073940277099609375, 0.017733000218868255615234375, 0.099384002387523651123046875), float4(-0.00144200003705918788909912109375, 0.02665599994361400604248046875, 0.0, 0.085608996450901031494140625) };

struct main0_out
{
    float4 out_var_SV_TARGET [[color(0)]];
};

struct main0_in
{
    float2 in_var_TEXCOORD0 [[user(locn0)]];
};

struct FsData
{
    sampler samplerLinear   [[id(0)]];
    sampler samplerPoint    [[id(1)]];
};

struct FsDataPerFrame
{
    texture2d<float> TextureCoC             [[id(0)]];
    texture2d<float> TextureFarR            [[id(1)]];
    texture2d<float> TextureFarG            [[id(2)]];
    texture2d<float> TextureFarB            [[id(3)]];
    texture2d<float> TextureNearR           [[id(4)]];
    texture2d<float> TextureNearG           [[id(5)]];
    texture2d<float> TextureNearB           [[id(6)]];
    texture2d<float> TextureColor           [[id(7)]];
    texture2d<float> TextureNearCoC         [[id(8)]];
    texture2d<float> TextureWeights         [[id(9)]];
    constant type_UniformDOF& UniformDOF    [[id(10)]]; 
};

fragment main0_out stageMain(
    main0_in in [[stage_in]],
    constant FsData&         fsData         [[buffer(UPDATE_FREQ_NONE)]],
    constant FsDataPerFrame& fsDataPerFrame [[buffer(UPDATE_FREQ_PER_FRAME)]])
{
    main0_out out = {};
    uint2 _199 = uint2(fsDataPerFrame.TextureFarR.get_width(), fsDataPerFrame.TextureFarR.get_height());
    float4 _209 = fsDataPerFrame.TextureColor.sample(fsData.samplerLinear, in.in_var_TEXCOORD0);
    float4 _213 = fsDataPerFrame.TextureCoC.sample(fsData.samplerPoint, in.in_var_TEXCOORD0);
    float _214 = _213.y;
    float4 _217 = fsDataPerFrame.TextureNearCoC.sample(fsData.samplerPoint, in.in_var_TEXCOORD0);
    float _218 = _217.x;
    float4 _363;
    if (_214 > 0.0)
    {
        float4 _223;
        float4 _226;
        float4 _228;
        float _230;
        int _232;
        _223 = float4(0.0);
        _226 = float4(0.0);
        _228 = float4(0.0);
        _230 = 0.0;
        _232 = 0;
        uint _234;
        for (;;)
        {
            _234 = uint(_232);
            if (_234 <= 16u)
            {
                int _238 = int(_234 - 8u);
                float2 _245 = in.in_var_TEXCOORD0 + (((float2(1.0) / float2(float(_199.x), float(_199.y))) * float2(0.0, float(_238))) * fsDataPerFrame.UniformDOF.maxRadius);
                float2 _251 = select(_245, in.in_var_TEXCOORD0, bool2(fsDataPerFrame.TextureCoC.sample(fsData.samplerPoint, _245).y == 0.0));
                float4 _257 = fsDataPerFrame.TextureFarR.sample(fsData.samplerLinear, _251);
                float4 _260 = fsDataPerFrame.TextureFarG.sample(fsData.samplerLinear, _251);
                float4 _263 = fsDataPerFrame.TextureFarB.sample(fsData.samplerLinear, _251);
                uint _265 = uint(_238) + 8u;
                float _270 = _257.x;
                float _273 = _257.y;
                float2 _282 = _228.xy + float2((_270 * _171[_265].x) - (_273 * _171[_265].y), (_270 * _171[_265].y) + (_273 * _171[_265].x));
                float _283 = _257.z;
                float _286 = _257.w;
                float2 _295 = _228.zw + float2((_283 * _181[_265].x) - (_286 * _181[_265].y), (_283 * _181[_265].y) + (_286 * _181[_265].x));
                float _296 = _260.x;
                float _298 = _260.y;
                float2 _306 = _226.xy + float2((_296 * _171[_265].x) - (_298 * _171[_265].y), (_296 * _171[_265].y) + (_298 * _171[_265].x));
                float _307 = _260.z;
                float _309 = _260.w;
                float2 _317 = _226.zw + float2((_307 * _181[_265].x) - (_309 * _181[_265].y), (_307 * _181[_265].y) + (_309 * _181[_265].x));
                float _318 = _263.x;
                float _320 = _263.y;
                float2 _328 = _223.xy + float2((_318 * _171[_265].x) - (_320 * _171[_265].y), (_318 * _171[_265].y) + (_320 * _171[_265].x));
                float _329 = _263.z;
                float _331 = _263.w;
                float2 _339 = _223.zw + float2((_329 * _181[_265].x) - (_331 * _181[_265].y), (_329 * _181[_265].y) + (_331 * _181[_265].x));
                _223 = float4(_328.x, _328.y, _339.x, _339.y);
                _226 = float4(_306.x, _306.y, _317.x, _317.y);
                _228 = float4(_282.x, _282.y, _295.x, _295.y);
                _230 += fsDataPerFrame.TextureWeights.sample(fsData.samplerLinear, _251).x;
                _232++;
                continue;
            }
            else
            {
                break;
            }
        }
        _363 = float4(float3(dot(_228.xy, float2(0.411258995532989501953125, -0.548793971538543701171875)) + dot(_228.zw, float2(0.513282001018524169921875, 4.561110019683837890625)), dot(_226.xy, float2(0.411258995532989501953125, -0.548793971538543701171875)) + dot(_226.zw, float2(0.513282001018524169921875, 4.561110019683837890625)), dot(_223.xy, float2(0.411258995532989501953125, -0.548793971538543701171875)) + dot(_223.zw, float2(0.513282001018524169921875, 4.561110019683837890625))) / float3(_230 * 0.0588235296308994293212890625), 0.0);
    }
    else
    {
        _363 = float4(0.0);
    }
    float4 _441;
    if (_218 > 0.0)
    {
        float2 _368;
        float2 _371;
        float2 _373;
        int _375;
        _368 = float2(0.0);
        _371 = float2(0.0);
        _373 = float2(0.0);
        _375 = 0;
        uint _377;
        for (;;)
        {
            _377 = uint(_375);
            if (_377 <= 16u)
            {
                int _381 = int(_377 - 8u);
                float2 _388 = in.in_var_TEXCOORD0 + (((float2(1.0) / float2(float(_199.x), float(_199.y))) * float2(0.0, float(_381))) * fsDataPerFrame.UniformDOF.maxRadius);
                float2 _394 = select(_388, in.in_var_TEXCOORD0, bool2(fsDataPerFrame.TextureNearCoC.sample(fsData.samplerPoint, _388).x == 0.0));
                float4 _397 = fsDataPerFrame.TextureNearR.sample(fsData.samplerLinear, _394);
                float4 _400 = fsDataPerFrame.TextureNearG.sample(fsData.samplerLinear, _394);
                float4 _403 = fsDataPerFrame.TextureNearB.sample(fsData.samplerLinear, _394);
                uint _405 = uint(_381) + 8u;
                float _408 = _397.x;
                float _411 = _397.y;
                float _419 = _400.x;
                float _421 = _400.y;
                float _428 = _403.x;
                float _430 = _403.y;
                _368 += float2((_428 * _191[_405].x) - (_430 * _191[_405].y), (_428 * _191[_405].y) + (_430 * _191[_405].x));
                _371 += float2((_419 * _191[_405].x) - (_421 * _191[_405].y), (_419 * _191[_405].y) + (_421 * _191[_405].x));
                _373 += float2((_408 * _191[_405].x) - (_411 * _191[_405].y), (_408 * _191[_405].y) + (_411 * _191[_405].x));
                _375++;
                continue;
            }
            else
            {
                break;
            }
        }
        _441 = float4(dot(_373, float2(0.76758301258087158203125, 1.86232101917266845703125)), dot(_371, float2(0.76758301258087158203125, 1.86232101917266845703125)), dot(_368, float2(0.76758301258087158203125, 1.86232101917266845703125)), 0.0);
    }
    else
    {
        _441 = float4(0.0);
    }
    out.out_var_SV_TARGET = mix(mix(_209, _363, float4(fast::clamp(_214 * fsDataPerFrame.UniformDOF.blend, 0.0, 1.0))), _441, float4(fast::clamp(_218 * fsDataPerFrame.UniformDOF.blend, 0.0, 1.0)));
    return out;
}

